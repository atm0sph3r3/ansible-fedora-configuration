---
- hosts: all
  vars_files:
    - vars.yml
  tasks:
    - name: update all packages
      package:
        name: "*"
        state: latest
    - name: install necessary packages for ansible use
      package:
        name: "{{item}}"
        state: latest
      loop:
        - libselinux-python
        - redhat-rpm-config
        - python-devel
        - python3-devel
    - name: install necessary pip packages for ansible use
      pip:
        name: "{{item}}"
        state: latest
      loop:
        - pexpect
    - name: set hostname
      hostname:
        name: "{{hostname}}"
    - name: make local bin directory
      file:
        state: directory
        path: "/home/{{username}}/bin"
        owner: "{{username}}"
        group: "{{username}}"
    - name: get ms rpm key
      rpm_key: 
        state: present
        key: 'https://packages.microsoft.com/keys/microsoft.asc'
    - name: get ms repo
      get_url:
        url: 'https://packages.microsoft.com/config/fedora/27/prod.repo'
        dest: /etc/yum.repos.d/microsoft-prod.repo
    - name: get docker repo file
      get_url:
        url: 'https://download.docker.com/linux/fedora/docker-ce.repo'
        dest: /etc/yum.repos.d/docker.repo
    - name: install necessary packages
      package:
        name: "{{packages}}"
        state: latest
    - name: start and enable services
      systemd:
        state: started
        name: "{{item}}"
        enabled: yes
      loop:
        - docker
        - libvirtd
    - name: install ruby gems
      gem:
        name: "{{item}}"
        state: latest
      loop:
        - gist
      become: "{{username}}"
    - name: add user to groups
      user:
        append: yes
        groups:
          - docker
          - libvirt
        name: "{{username}}"
    - name: remove retry file creation
      replace:
        path: /etc/ansible/ansible.cfg
        regexp: '#retry_files_enabled = False'
        replace: 'retry_files_enabled = False'
    - name: allow sudo without password each time
      replace:
        path: /etc/sudoers
        regexp: '# %wheel        ALL=(ALL)       NOPASSWD: ALL'
        replace: '%wheel	ALL=(ALL)	NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'
    - name: get jetbrains toolbox
      unarchive:
        src: "https://download-cf.jetbrains.com/toolbox/jetbrains-toolbox-{{jb_toolbox_version}}.tar.gz"
        dest: /usr/local/bin
        mode: 0755
        remote_src: yes
        creates: "/usr/local/bin/jetbrains-toolbox-{{jb_toolbox_version}}"
    - name: get vimrc repo
      git:
        repo: 'https://github.com/tb120/vimrc.git'
        clone: yes
        depth: 1
        dest: /usr/local/bin/vimrc
        update: no
    - name: install vimrc files
      command: sh /usr/local/bin/vimrc/install_awesome_vimrc.sh
      args: 
        creates: "/home/{{username}}/.vimrc"
      become: "{{username}}"
    - name: install pip packages
      pip:
        name: "{{pip_packages}}"
        state: latest
        extra_args: '--user'
      become: "{{username}}"
    - name: add powerline config to bashrc
      blockinfile:
        path: "/home/{{username}}/.bashrc"
        block: |
          if [ -f `which powerline-daemon` ]; then
            powerline-daemon -q
            POWERLINE_BASH_CONTINUATION=1
            POWERLINE_BASH_SELECT=1
            . /usr/share/powerline/bash/powerline.sh
          fi
        marker: "# {mark} ANSIBLE MANAGED BLOCK POWERLINE"
    - name: source bash_aliases in bashrc
      blockinfile:
        path: "/home/{{username}}/.bashrc"
        block: |
          if [ -f $HOME/.bash_aliases ]; then
            . $HOME/.bash_aliases
          fi
        marker: "# {mark} ANSIBLE MANAGED BLOCK BASH_ALIASES"
    - name: get pia installer (pia)
      get_url:
        url: "https://www.privateinternetaccess.com/installer/pia-nm.sh"
        dest: /usr/local/bin
        mode: 0700
    - name: add tmux powerline conf to tmux.conf
      lineinfile:
        line: 'source "/usr/share/tmux/powerline.conf"'
        path: "/home/{{username}}/.tmux.conf"
        create: yes
    - name: get tor browser
      unarchive:
        src: "https://dist.torproject.org/torbrowser/{{tor_browser_version}}/tor-browser-linux64-{{tor_browser_version}}_en-US.tar.xz"
        dest: "/home/{{username}}/bin"
        mode: 0700
        remote_src: yes
        creates: "/home/{{username}}/bin/tor-browser_en-US"
        owner: "{{username}}"
        group: "{{username}}"
    - name: create alias for tor browser
      file:
        src: "/home/{{username}}/bin/tor-browser_en-US/Browser/start-tor-browser"
        path: "/home/{{username}}/bin/tor-browser"
        state: link
    - name: download burp suite community edition
      get_url:
        url: "https://portswigger.net/burp/releases/download?product=community&version={{burpsuite_version}}&type=linux"
        dest: /usr/local/bin
    # burp suite uses a graphical installer for the installation. install in the user's
    # home bin directory
    - name: add sym link for burp suite
      file:
        state: link
        src: "/home/{{username}}/bin/BurpSuiteCommunity/BurpSuiteCommunity"
        dest: "/home/{{username}}/bin/burpsuite"
...
